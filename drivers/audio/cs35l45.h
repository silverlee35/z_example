/*
 * Copyright 2024 Cirrus Logic, Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

#ifndef ZEPHYR_DRIVERS_AUDIO_CS35L45_H_
#define ZEPHYR_DRIVERS_AUDIO_CS35L45_H_

#include <zephyr/types.h>
#include <zephyr/device.h>
#include <zephyr/drivers/gpio.h>
#include <zephyr/audio/codec.h>
#include <zephyr/sys/util.h>

#define CS35L45_DEVID     0x00000000
#define CS35L45_REVID     0x00000004
#define CS35L45_RELID     0x0000000C
#define CS35L45_OTPID     0x00000010
#define CS35L45_SFT_RESET 0x00000020

#define CS35L45_GLOBAL_ENABLES    0x00002014
#define CS35L45_GLOBAL_EN_MASK    BIT(0)
#define CS35L45_POST_GLOBAL_EN_US 5000
#define CS35L45_PRE_GLOBAL_DIS_US 3000

#define CS35L45_BLOCK_ENABLES      0x00002018
#define CS35L45_BST_EN_MASK        GENMASK(5, 4)
#define CS35L45_BST_DISABLE_FET_ON 0x1

#define CS35L45_BLOCK_ENABLES2 0x0000201C
#define CS35L45_ASP_EN         BIT(27)

#define CS35L45_ERROR_RELEASE  0x00002034
#define CS35L45_GLOBAL_ERR_RLS BIT(11)

#define CS35L45_REFCLK_INPUT         0x00002C04
#define CS35L45_PLL_OPEN_LOOP_MASK   BIT(11)
#define CS35L45_PLL_REFCLK_FREQ_MASK GENMASK(10, 5)
#define CS35L45_PLL_REFCLK_EN_MASK   BIT(4)

#define CS35L45_GLOBAL_SAMPLE_RATE 0x00002C0C
#define CS35L45_GLOBAL_FS_MASK     GENMASK(4, 0)
#define CS35L45_GLOBAL_FS_44P1K    0xB
#define CS35L45_GLOBAL_FS_48K      0x3
#define CS35L45_GLOBAL_FS_96K      0x4

#define CS35L45_BOOST_CCM_CFG 0x00003808
#define CS35L45_BOOST_DCM_CFG 0x0000380C
#define CS35L45_BOOST_OV_CFG  0x0000382C

#define CS35L45_ASP_ENABLES1 0x00004800
#define CS35L45_ASP_RX2_EN   BIT(17)
#define CS35L45_ASP_RX1_EN   BIT(16)

#define CS35L45_ASP_CONTROL1 0x00004804

#define CS35L45_ASP_CONTROL2      0x00004808
#define CS35L45_ASP_WIDTH_RX_MASK GENMASK(31, 24)
#define CS35L45_ASP_WIDTH_TX_MASK GENMASK(23, 16)
#define CS35L45_ASP_WIDTH_MIN     12
#define CS35L45_ASP_WIDTH_MAX     128
#define CS35L45_ASP_FMT_MASK      GENMASK(10, 8)
#define CS35L45_ASP_FMT_DSP_A     0
#define CS35L45_ASP_FMT_I2S       2
#define CS35L45_ASP_FMT_TDM_1_5   4
#define CS35L45_ASP_BCLK_INV      BIT(6)
#define CS35L45_ASP_FSYNC_INV     BIT(2)

#define CS35L45_ASP_CONTROL3       0x0000480C
#define CS35L45_ASP_FRAME_CONTROL1 0x00004810
#define CS35L45_ASP_FRAME_CONTROL2 0x00004814
#define CS35L45_ASP_FRAME_CONTROL5 0x00004820
#define CS35L45_ASP_DATA_CONTROL1  0x00004830

#define CS35L45_ASP_DATA_CONTROL5 0x00004840
#define CS35L45_ASP_WL_MASK       GENMASK(5, 0)
#define CS35L45_ASP_WL_MIN        12
#define CS35L45_ASP_WL_MAX        24

#define CS35L45_DACPCM1_INPUT         0x00004C00
#define CS35L45_DACPCM1_SRC_MASK      GENMASK(6, 0)
#define CS35L45_DACPCM1_SRC_ZERO_FILL 0x0
#define CS35L45_DACPCM1_SRC_ASP_RX1   0x8
#define CS35L45_DACPCM1_SRC_ASP_RX2   0x9
#define CS35L45_DACPCM1_SRC_DSP_TX1   0x32
#define CS35L45_DACPCM1_SRC_DSP_TX2   0x33

#define CS35L45_ASPTX1_INPUT 0x00004C20
#define CS35L45_ASPTX2_INPUT 0x00004C24
#define CS35L45_ASPTX3_INPUT 0x00004C28
#define CS35L45_ASPTX4_INPUT 0x00004C2C
#define CS35L45_ASPTX5_INPUT 0x00004C30
#define CS35L45_LDPM_CONFIG  0x00006404

#define CS35L45_AMP_PCM_CONTROL  0x00007000
#define CS35L45_AMP_VOL_PCM_MIN  -816
#define CS35L45_AMP_VOL_PCM_MAX  96
#define CS35L45_AMP_VOL_PCM_MASK GENMASK(10, 0)

#define CS35L45_AMP_PCM_HPF_TST 0x00007004

#define CS35L45_AMP_OUTPUT_MUTE 0x00007C04
#define CS35L45_AMP_MUTE        BIT(0)

#define CS35L45_HPF_44P1    0x000108BD
#define CS35L45_HPF_88P2    0x0001045F
#define CS35L45_HPF_DEFAULT 0x0

#define CS35L45_IRQ1_EINT_4            0x0000E01C
#define CS35L45_OTP_BOOT_DONE_STS_MASK BIT(1)
#define CS35L45_OTP_BUSY_MASK          BIT(0)

#define CS35L45_T_RLPW_US 1000
#define CS35L45_T_IRS_US  1100

#define I2S_FMT_I2S_CHANNELS 2

static const struct {
	uint8_t cfg_id;
	uint32_t freq;
} cs35l45_pll_refclk_freq[] = {
	{0x0C, 128000},   {0x0F, 256000},   {0x11, 384000},   {0x12, 512000},   {0x15, 768000},
	{0x17, 1024000},  {0x19, 1411200},  {0x1B, 1536000},  {0x1C, 2116800},  {0x1D, 2048000},
	{0x1E, 2304000},  {0x1F, 2822400},  {0x21, 3072000},  {0x23, 4233600},  {0x24, 4096000},
	{0x25, 4608000},  {0x26, 5644800},  {0x27, 6000000},  {0x28, 6144000},  {0x29, 6350400},
	{0x2A, 6912000},  {0x2D, 7526400},  {0x2E, 8467200},  {0x2F, 8192000},  {0x30, 9216000},
	{0x31, 11289600}, {0x33, 12288000}, {0x37, 16934400}, {0x38, 18432000}, {0x39, 22579200},
	{0x3B, 24576000},
};

struct reg_sequence {
	uint32_t reg;
	uint32_t def;
};

static const struct reg_sequence cs35l45_patch[] = {
	{0x00000040, 0x00000055},
	{0x00000040, 0x000000AA},
	{0x00000044, 0x00000055},
	{0x00000044, 0x000000AA},
	{0x00006480, 0x0830500A},
	{0x00007C60, 0x1000850B},
	{CS35L45_BOOST_OV_CFG, 0x007000D0},
	{CS35L45_LDPM_CONFIG, 0x0001B636},
	{0x00002C08, 0x00000009},
	{0x00006850, 0x0A30FFC4},
	{0x00003820, 0x00040100},
	{0x00003824, 0x00000000},
	{0x00007CFC, 0x62870004},
	{0x00007C60, 0x1001850B},
	{0x00000040, 0x00000000},
	{0x00000044, 0x00000000},
	{CS35L45_BOOST_CCM_CFG, 0xF0000003},
	{CS35L45_BOOST_DCM_CFG, 0x08710220},
	{CS35L45_ERROR_RELEASE, 0x00200000},
};

#endif
